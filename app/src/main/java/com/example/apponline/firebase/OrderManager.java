package com.example.apponline.firebase;

import android.util.Log;
import com.example.apponline.models.Order;
import com.example.apponline.models.OrderItem;
import com.google.firebase.firestore.FirebaseFirestore;
import com.google.firebase.firestore.Query;
import com.google.firebase.firestore.QueryDocumentSnapshot;
import java.util.ArrayList;
import java.util.List;

/**
 * OrderManager qu·∫£n l√Ω c√°c thao t√°c li√™n quan ƒë·∫øn Order (L·ªãch s·ª≠ ƒë∆°n h√†ng v√† t·∫°o ƒë∆°n h√†ng).
 * S·ª≠ d·ª•ng m·∫´u Singleton.
 */
public class OrderManager {

    private static final String TAG = "OrderManager";
    private static final String COLLECTION_ORDERS = "orders";

    private static OrderManager instance;
    private FirebaseFirestore db;

    // =========================================================================
    // INTERFACE CALLBACK
    // =========================================================================
    public interface OrderLoadCallback {
        void onOrdersLoaded(List<Order> orders);
        void onFailure(String errorMessage);
    }
    // =========================================================================

    private OrderManager() {
        db = FirebaseHelper.getFirestoreInstance();
    }

    public static synchronized OrderManager getInstance() {
        if (instance == null) {
            instance = new OrderManager();
        }
        return instance;
    }

    // =========================================================================
    // T·∫¢I L·ªäCH S·ª¨ ƒê∆†N H√ÄNG
    // =========================================================================

    /**
     * T·∫£i t·∫•t c·∫£ c√°c ƒë∆°n h√†ng c·ªßa ng∆∞·ªùi d√πng hi·ªán t·∫°i t·ª´ Firestore.
     */
    public void fetchUserOrders(OrderLoadCallback callback) {
        String userId = FirebaseHelper.getCurrentUserId();

        if (userId == null) {
            String errorMsg = "User not logged in, cannot fetch orders.";
            Log.w(TAG, errorMsg);
            callback.onFailure(errorMsg);
            return;
        }

        db.collection(COLLECTION_ORDERS)
                .whereEqualTo("userId", userId) // L·ªåC theo userId
                .orderBy("timestamp", Query.Direction.DESCENDING) // Hi·ªÉn th·ªã ƒë∆°n h√†ng m·ªõi nh·∫•t tr∆∞·ªõc
                .get()
                .addOnSuccessListener(querySnapshot -> {
                    List<Order> loadedOrders = new ArrayList<>();

                    for (QueryDocumentSnapshot document : querySnapshot) {
                        try {
                            Order order = document.toObject(Order.class);

                            if (order != null) {
                                // üö® S·ª¨A L·ªñI: G√°n Document ID cho tr∆∞·ªùng orderId (n·∫øu b·∫°n d√πng n√≥ nh∆∞ ID ch√≠nh th·ª©c)
                                // N·∫øu tr∆∞·ªùng orderId ƒë√£ c√≥ trong Firestore, d√≤ng n√†y ch·ªâ x√°c nh·∫≠n ID.
                                // N·∫øu b·∫°n ƒëang d√πng Document ID l√†m ID ch√≠nh:
                                order.setOrderId(document.getId());

                                // üö® S·ª¨A L·ªñI: ƒê·∫£m b·∫£o tr∆∞·ªùng items kh√¥ng NULL (ph√≤ng ng·ª´a l·ªói trong Firestore)
                                if (order.getItems() == null) {
                                    order.setItems(new ArrayList<>());
                                }

                                loadedOrders.add(order);
                                Log.d(TAG, "Order loaded: " + order.getOrderId() + ", Items: " + order.getItems().size());
                            } else {
                                Log.e(TAG, "MAPPING FAILED for Order Document ID: " + document.getId() + ". Check Order and OrderItem models.");
                            }
                        } catch (Exception e) {
                            Log.e(TAG, "Error processing order document " + document.getId() + ": " + e.getMessage());
                            // B·ªè qua document b·ªã l·ªói v√† ti·∫øp t·ª•c v·ªõi c√°c document kh√°c
                        }
                    }

                    callback.onOrdersLoaded(loadedOrders);
                })
                .addOnFailureListener(e -> {
                    String errorMsg = "Error fetching orders: " + e.getMessage();
                    Log.e(TAG, errorMsg);
                    callback.onFailure("L·ªói t·∫£i ƒë∆°n h√†ng. Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi m·∫°ng ho·∫∑c quy t·∫Øc b·∫£o m·∫≠t.");
                });
    }

    // =========================================================================
    // T·∫†O ƒê∆†N H√ÄNG (M·∫´u)
    // =========================================================================

    /**
     * H√†m m·∫´u ƒë·ªÉ t·∫°o v√† l∆∞u ƒë∆°n h√†ng m·ªõi v√†o Firestore.
     */
    public void placeOrder(Order newOrder, OrderPlaceCallback callback) {
        // T·∫°o m·ªôt document reference m·ªõi ƒë·ªÉ Firestore t·ª± ƒë·ªông t·∫°o ID
        // N·∫øu newOrder ƒë√£ c√≥ orderId, d√πng set() thay v√¨ add()

        db.collection(COLLECTION_ORDERS).add(newOrder)
                .addOnSuccessListener(documentReference -> {
                    Log.d(TAG, "Order placed successfully with ID: " + documentReference.getId());
                    callback.onSuccess(documentReference.getId());
                })
                .addOnFailureListener(e -> {
                    Log.e(TAG, "Error placing order: " + e.getMessage());
                    callback.onFailure("L·ªói khi t·∫°o ƒë∆°n h√†ng. Vui l√≤ng th·ª≠ l·∫°i.");
                });
    }

    public interface OrderPlaceCallback {
        void onSuccess(String orderId);
        void onFailure(String errorMessage);
    }
}