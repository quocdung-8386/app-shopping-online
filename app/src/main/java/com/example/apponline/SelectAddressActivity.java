package com.example.apponline;

import android.app.Activity;
import android.app.AlertDialog; // üëà C·∫ßn cho AlertDialog
import android.content.Intent;
import android.os.Bundle;
import android.util.Log;
import android.widget.Button;
import android.widget.ImageButton;
import android.widget.Toast;

import androidx.activity.result.ActivityResultLauncher;
import androidx.activity.result.contract.ActivityResultContracts;
import androidx.appcompat.app.AppCompatActivity;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;
import com.example.apponline.Adapters.AddressAdapter;
import com.example.apponline.models.Address;
import com.google.firebase.auth.FirebaseAuth;
import com.google.firebase.auth.FirebaseUser;
import com.google.firebase.firestore.FirebaseFirestore;
import com.google.firebase.firestore.QueryDocumentSnapshot;

import java.util.ArrayList;
import java.util.List;

public class SelectAddressActivity extends AppCompatActivity {

    private RecyclerView recyclerView;
    private AddressAdapter adapter;
    private List<Address> addressList = new ArrayList<>();
    private Button addNewAddressButton;
    private ImageButton btnBack;

    private FirebaseFirestore db;
    private FirebaseAuth mAuth;
    private FirebaseUser currentUser;

    private static final String TAG = "SelectAddressActivity";
    public static final String SELECTED_ADDRESS_KEY = "selected_address";

    // === 1. ƒêƒÉng k√Ω Activity Result Launcher (Ch·ªâ d√πng cho vi·ªác th√™m m·ªõi) ===
    private final ActivityResultLauncher<Intent> newAddressLauncher = registerForActivityResult(
            new ActivityResultContracts.StartActivityForResult(),
            result -> {
                // Ki·ªÉm tra xem NewAddressActivity c√≥ th√†nh c√¥ng kh√¥ng
                if (result.getResultCode() == Activity.RESULT_OK) {
                    Toast.makeText(this, "ƒê√£ th√™m ƒë·ªãa ch·ªâ m·ªõi. ƒêang t·∫£i l·∫°i...", Toast.LENGTH_SHORT).show();
                    // T·∫£i l·∫°i d·ªØ li·ªáu t·ª´ Firebase
                    loadAddressesFromFirestore();
                }
            }
    );

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_select_address);

        // Kh·ªüi t·∫°o Firebase
        mAuth = FirebaseAuth.getInstance();
        db = FirebaseFirestore.getInstance();
        currentUser = mAuth.getCurrentUser();

        initViews();
        setupRecyclerView();
        setupListeners();

        // B·∫Øt ƒë·∫ßu t·∫£i ƒë·ªãa ch·ªâ khi Activity ƒë∆∞·ª£c t·∫°o
        loadAddressesFromFirestore();
    }

    private void initViews() {
        recyclerView = findViewById(R.id.address_recycler_view);
        addNewAddressButton = findViewById(R.id.add_new_address_button);
        // L∆∞u √Ω: ƒê·∫£m b·∫£o ID n√†y kh·ªõp v·ªõi XML (n·∫øu XML c√≥ ID l√† back_button th√¨ gi·ªØ nguy√™n)
        btnBack = findViewById(R.id.back_button);
    }

    private void setupListeners() {
        // N√∫t Back
        btnBack.setOnClickListener(v -> finish());

        // N√∫t Th√™m ƒë·ªãa ch·ªâ m·ªõi
        addNewAddressButton.setOnClickListener(v -> {
            Intent intent = new Intent(SelectAddressActivity.this, NewAddressActivity.class);
            newAddressLauncher.launch(intent);
        });
    }

    /**
     * Thi·∫øt l·∫≠p RecyclerView v√† logic tr·∫£ k·∫øt qu·∫£
     */
    private void setupRecyclerView() {
        // üö® S·ª¨A L·ªñI: Thay th·∫ø Lambda b·∫±ng Anonymous Class ƒë·ªÉ tri·ªÉn khai c·∫£ hai ph∆∞∆°ng th·ª©c
        adapter = new AddressAdapter(this, addressList, new AddressAdapter.OnAddressSelectedListener() {

            // 1. Ph∆∞∆°ng th·ª©c CH·ªåN ƒë·ªãa ch·ªâ
            @Override
            public void onAddressSelected(Address selectedAddress) {
                // === LOGIC TR·∫¢ ƒê·ªäA CH·ªà ƒê√É CH·ªåN V·ªÄ ACTIVITY G·ªåI ===
                Intent resultIntent = new Intent();
                resultIntent.putExtra(SELECTED_ADDRESS_KEY, selectedAddress);
                setResult(Activity.RESULT_OK, resultIntent);
                finish();

                String detailInfo;
                try {
                    detailInfo = selectedAddress.getDetailAddress();
                } catch (Exception e) {
                    detailInfo = "ƒê·ªãa ch·ªâ: " + selectedAddress.getName() + " - " + selectedAddress.getPhoneNumber();
                }
                Toast.makeText(SelectAddressActivity.this, "ƒêang g·ª≠i ƒë·ªãa ch·ªâ ƒë√£ ch·ªçn: " + detailInfo, Toast.LENGTH_SHORT).show();
            }

            // 2. Ph∆∞∆°ng th·ª©c XO√Å ƒë·ªãa ch·ªâ
            @Override
            public void onAddressDeleted(Address addressToDelete) {
                // Hi·ªÉn th·ªã h·ªôp tho·∫°i x√°c nh·∫≠n tr∆∞·ªõc khi x√≥a
                showDeleteConfirmationDialog(addressToDelete);
            }
        });

        recyclerView.setLayoutManager(new LinearLayoutManager(this));
        recyclerView.setAdapter(adapter);
    }

    /**
     * T·∫£i danh s√°ch ƒë·ªãa ch·ªâ t·ª´ Firestore
     */
    private void loadAddressesFromFirestore() {
        if (currentUser == null) {
            Toast.makeText(this, "Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ xem ƒë·ªãa ch·ªâ.", Toast.LENGTH_LONG).show();
            return;
        }

        db.collection("users")
                .document(currentUser.getUid())
                .collection("addresses")
                .get()
                .addOnSuccessListener(queryDocumentSnapshots -> {
                    addressList.clear();
                    // üö® T√åM ƒê·ªäA CH·ªà M·∫∂C ƒê·ªäNH
                    int defaultAddressPosition = -1;
                    int positionCounter = 0;

                    for (QueryDocumentSnapshot document : queryDocumentSnapshots) {
                        try {
                            Address address = document.toObject(Address.class);
                            // üö® L∆ØU DOCUMENT ID v√†o tr∆∞·ªùng addressId
                            address.setAddressId(document.getId());
                            addressList.add(address);

                            if (address.isDefault()) {
                                defaultAddressPosition = positionCounter;
                            }
                            positionCounter++;
                        } catch (Exception e) {
                            Log.e(TAG, "L·ªói √°nh x·∫° Firestore th√†nh Address: " + e.getMessage());
                        }
                    }

                    // üö® ƒê·∫∂T V·ªä TR√ç M·∫∂C ƒê·ªäNH CHO ADAPTER
                    if (defaultAddressPosition != -1) {
                        adapter.setSelectedPosition(defaultAddressPosition);
                    } else if (!addressList.isEmpty()) {
                        // N·∫øu kh√¥ng c√≥ m·∫∑c ƒë·ªãnh, ch·ªçn ƒë·ªãa ch·ªâ ƒë·∫ßu ti√™n
                        adapter.setSelectedPosition(0);
                    } else {
                        adapter.setSelectedPosition(-1);
                    }

                    adapter.notifyDataSetChanged();
                })
                .addOnFailureListener(e -> {
                    Log.e(TAG, "L·ªói t·∫£i ƒë·ªãa ch·ªâ: " + e.getMessage());
                    Toast.makeText(this, "L·ªói t·∫£i danh s√°ch ƒë·ªãa ch·ªâ.", Toast.LENGTH_SHORT).show();
                });
    }

    // ======================================
    // === C√ÅC PH∆Ø∆†NG TH·ª®C X·ª¨ L√ù XO√Å ƒê·ªäA CH·ªà ===
    // ======================================

    /**
     * Hi·ªÉn th·ªã h·ªôp tho·∫°i x√°c nh·∫≠n x√≥a ƒë·ªãa ch·ªâ
     */
    private void showDeleteConfirmationDialog(Address address) {
        new AlertDialog.Builder(this)
                .setTitle("X√°c nh·∫≠n X√≥a ƒê·ªãa ch·ªâ")
                .setMessage("B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a ƒë·ªãa ch·ªâ c·ªßa " + address.getName() + " kh√¥ng?")
                .setPositiveButton("X√≥a", (dialog, which) -> {
                    // G·ªçi h√†m x√≥a Firebase
                    deleteAddressFromFirestore(address);
                })
                .setNegativeButton("H·ªßy", null)
                .show();
    }

    /**
     * Th·ª±c hi·ªán x√≥a ƒë·ªãa ch·ªâ kh·ªèi Firestore
     */
    private void deleteAddressFromFirestore(Address address) {
        if (currentUser == null || address.getAddressId() == null) {
            Toast.makeText(this, "L·ªói: Kh√¥ng th·ªÉ x√≥a ƒë·ªãa ch·ªâ.", Toast.LENGTH_SHORT).show();
            return;
        }

        db.collection("users")
                .document(currentUser.getUid())
                .collection("addresses")
                .document(address.getAddressId()) // S·ª≠ d·ª•ng AddressId ƒë·ªÉ x√°c ƒë·ªãnh document
                .delete()
                .addOnSuccessListener(aVoid -> {
                    Toast.makeText(this, "ƒê√£ x√≥a ƒë·ªãa ch·ªâ th√†nh c√¥ng!", Toast.LENGTH_SHORT).show();
                    // T·∫£i l·∫°i danh s√°ch sau khi x√≥a th√†nh c√¥ng
                    loadAddressesFromFirestore();
                })
                .addOnFailureListener(e -> {
                    Log.e(TAG, "L·ªói x√≥a ƒë·ªãa ch·ªâ: " + e.getMessage());
                    Toast.makeText(this, "L·ªói: X√≥a ƒë·ªãa ch·ªâ th·∫•t b·∫°i.", Toast.LENGTH_SHORT).show();
                });
    }
}